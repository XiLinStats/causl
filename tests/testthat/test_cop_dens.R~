# set.seed(123)
# Sig <- array(NA, c(3,3,100))
# Sig[] <- rWishart(1,df=10,Sigma=diag(3))[,,1]
# dSig <- diag(Sig[,,1])
# Sig <- Sig/sqrt(dSig*rep(dSig, each=3))
#
# x <- pnorm(rmvnorm(100, sigma=Sig[,,1]))
#
# ## check that C++ and R implementations of dGaussCop give the same answers
# test_that("C++ and R implementations agree", {
#   expect_equal(dGaussCop(x, Sigma=Sig, useC=TRUE),
#                dGaussCop(x, Sigma=Sig, useC=FALSE))
#   expect_equal(dGaussCop(x, Sigma=Sig[,,1], useC=TRUE),
#                dGaussCop(x, Sigma=Sig[,,1], useC=FALSE))
# })
#
# ## now check that fitting works
# xd <- as.data.frame(qnorm(x))
# out <- fitCausal(xd, formulas=list(V2 ~ V1, V3 ~ 1, ~ 1),
# control=list(trace=1), newton=TRUE)
# out2 <- fit_cop(xd, forms=list(V2 ~ V1, V3 ~ 1, ~ 1), init=TRUE, control=list(trace=1), newton=TRUE)
# lm1 <- lm(V2 ~ V1 + V3, data = xd)
#
# test_that("fit_cop works and prints sensibly", {
#   expect_equivalent(out$par[2], lm1$coefficients[2])
#   expect_equivalent(out2$par[2], lm1$coefficients[2])
#   expect_is(print.cop_fit(out), "cop_fit")
#   expect_is(print.cop_fit(out2), "cop_fit")
# })
